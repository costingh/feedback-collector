generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model UserApiLimit {
  id        String   @id @default(cuid())
  userId    String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model User {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique
  firstname    String?
  lastname     String?
  createdAt    DateTime       @default(now())
  clerkid      String         @unique
  image        String?
  workspace    WorkSpace[]
  subscription Subscription?
  trial        Boolean        @default(false)
  firstView    Boolean        @default(false)
  sender       Invite[]       @relation("sender")
  reciever     Invite[]       @relation("reciever")
  members      Member[]
  notification Notification[]
}

model Subscription {
  id         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User       User?             @relation(fields: [userId], references: [id])
  userId     String?           @unique @db.Uuid
  createdAt  DateTime          @default(now())
  plan       SUBSCRIPTION_PLAN @default(FREE)
  updatedAt  DateTime          @default(now())
  customerId String?           @unique
}

model WorkSpace {
  id        String   @id @default(cuid())
  type      Type
  name      String
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.Uuid
  createdAt DateTime @default(now())
  members   Member[]
  invite    Invite[]
  Form      Form[]
  Widget    Widget[]
  Tag       Tag[]
}

model Invite {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sender      User?      @relation("sender", fields: [senderId], references: [id])
  senderId    String?    @db.Uuid
  reciever    User?      @relation("reciever", fields: [recieverId], references: [id])
  recieverId  String?    @db.Uuid
  content     String
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?
  accepted    Boolean    @default(false)
}

model Member {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User        User?      @relation(fields: [userId], references: [id])
  userId      String?    @db.Uuid
  createdAt   DateTime   @default(now())
  member      Boolean    @default(true)
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model Form {
  id                  String          @id @default(cuid())
  name                String
  brandLogo           String
  brandName           String
  backgroundColor     String
  primaryColor        String
  withAnimatedBg      Boolean
  formFields          FormField[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  userId              String
  published           Boolean
  isPaused            Boolean
  pausedUntil         DateTime?
  isGhostForm         Boolean         @default(false)
  url                 String          @unique
  customUrl           String
  title               String
  description         String
  questions           Question[]
  textareaPlaceholder String
  buttonLabel         String
  FormResponse        FormResponse[]
  thankYouPageTitle   String
  thankYouPageMessage String
  thankYouCustomURL   String
  FormAnalytics       FormAnalytics[]
  workspaceId         String
  workspace           WorkSpace       @relation(fields: [workspaceId], references: [id])
}

model FormField {
  id         String  @id @default(cuid())
  key        String
  isEnabled  Boolean
  isRequired Boolean
  formId     String
  form       Form    @relation(fields: [formId], references: [id])
}

model Question {
  id     String @id @default(cuid())
  text   String
  formId String
  form   Form   @relation(fields: [formId], references: [id])
}

model FormAnalytics {
  id         Int      @id @default(autoincrement())
  actionType String
  value      Float
  formId     String
  country    String   @default("")
  userAgent  String   @default("")
  platform   String   @default("")
  deviceType String   @default("")
  createdAt  DateTime @default(now())

  Form Form @relation(fields: [formId], references: [id])

  @@index([formId, createdAt])
}

model FormResponse {
  id        String   @id @default(cuid())
  stars     Float
  message   String
  name      String
  email     String
  company   String
  jobTitle  String
  website   String
  formId    String
  avatar    String
  logo      String
  video     String   @default("")
  source    String   @default("feedbackz")
  approved  Boolean
  form      Form     @relation(fields: [formId], references: [id])
  createdAt DateTime @default(now())
  tagId     String?
  widgetId  String?
  widgets   Widget[] @relation("TestimonialWidgets")
}

model Widget {
  id                 String            @id @default(cuid())
  name               String
  target             String
  url                String            @unique
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  userId             String
  type               String
  starsVariant       StarsVariant      @default(default)
  starsColor         String            @default("#FFA132")
  widgetDescription  String            @default("")
  cardBackground     String            @default("#fff")
  primaryTextColor   String            @default("#3f3f46")
  secondaryTextColor String            @default("#4b5563")
  thirdTextColor     String            @default("#374151")
  cardBorderColor    String            @default("#e5e7eb")
  variant            String            @default("")
  assetColorVariant   String           @default("white")
  WidgetAnalytics    WidgetAnalytics[]
  workspaceId        String
  workspace          WorkSpace         @relation(fields: [workspaceId], references: [id])
  testimonials       FormResponse[]    @relation("TestimonialWidgets")
}

model Tag {
  id               String    @id @default(cuid())
  tagName          String
  category         String
  tagDescription   String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  userId           String
  formResponsesIds String[]
  workspaceId      String
  workspace        WorkSpace @relation(fields: [workspaceId], references: [id])
}

model BugReport {
  id          Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
}

model FeatureRequest {
  id          Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
}

model WidgetAnalytics {
  id         Int      @id @default(autoincrement())
  actionType String
  value      Float
  createdAt  DateTime @default(now())
  widgetId   String

  Widget Widget @relation(fields: [widgetId], references: [id])

  @@index([widgetId, createdAt])
}

model Notification {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User    User?   @relation(fields: [userId], references: [id])
  userId  String? @db.Uuid
  content String
}

enum SUBSCRIPTION_PLAN {
  FREE
  PRO
  BUSINESS
}

enum Type {
  PERSONAL
  PUBLIC
}

enum StarsVariant {
  default
  custom1
}
